Provided proper attribution is provided Google hereby grants permission to reproduce the tables and figures in this paper solely for use in journalistic or scholarly works Attention Is All You Need Ashish Vaswani Google Brain avaswanigooglecom Noam Shazeer Google Brain noamgooglecom Niki Parmar Google Research nikipgooglecom Jakob Uszkoreit Google Research uszgooglecom Llion Jones Google Research lliongooglecom Aidan N Gomez University of Toronto aidancstorontoedu ukasz Kaiser Google Brain lukaszkaisergooglecom Illia Polosukhin illiapolosukhingmailcom Abstract The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder The best performing models also connect the encoder and decoder through an attention mechanism We propose a new simple network architecture the Transformer based solely on attention mechanisms dispensing with recurrence and convolutions entirely Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train Our model achieves 284 BLEU on the WMT 2014 English toGerman translation task improving over the existing best results including ensembles by over 2 BLEU On the WMT 2014 EnglishtoFrench translation task our model establishes a new singlemodel stateoftheart BLEU score of 418 after training for 35 days on eight GPUs a small fraction of the training costs of the best models from the literature We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data Equal contribution Listing order is random Jakob proposed replacing RNNs with selfattention and started the effort to evaluate this idea Ashish with Illia designed and implemented the first Transformer models and has been crucially involved in every aspect of this work Noam proposed scaled dotproduct attention multihead attention and the parameterfree position representation and became the other person involved in nearly every detail Niki designed implemented tuned and evaluated countless model variants in our original codebase and tensor2tensor Llion also experimented with novel model variants was responsible for our initial codebase and efficient inference and visualizations Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor replacing our earlier codebase greatly improving results and massively accelerating our research Work performed while at Google Brain Work performed while at Google Research 31st Conference on Neural Information Processing Systems NIPS 2017 Long Beach CA USA arXiv170603762v7 csCL 2 Aug 20231 Introduction Recurrent neural networks long shortterm memory 13 and gated recurrent 7 neural networks in particular have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation 35 2 5 Numerous efforts have since continued to push the boundaries of recurrent language models and encoderdecoder architectures 38 24 15 Recurrent models typically factor computation along the symbol positions of the input and output sequences Aligning the positions to steps in computation time they generate a sequence of hidden states ht as a function of the previous hidden state ht1 and the input for position t This inherently sequential nature precludes parallelization within training examples which becomes critical at longer sequence lengths as memory constraints limit batching across examples Recent work has achieved significant improvements in computational efficiency through factorization tricks 21 and conditional computation 32 while also improving model performance in case of the latter The fundamental constraint of sequential computation however remains Attention mechanisms have become an integral part of compelling sequence modeling and transduc tion models in various tasks allowing modeling of dependencies without regard to their distance in the input or output sequences 2 19 In all but a few cases 27 however such attention mechanisms are used in conjunction with a recurrent network In this work we propose the Transformer a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs 2 Background The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU 16 ByteNet 18 and ConvS2S 9 all of which use convolutional neural networks as basic building block computing hidden representations in parallel for all input and output positions In these models the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions linearly for ConvS2S and logarithmically for ByteNet This makes it more difficult to learn dependencies between distant positions 12 In the Transformer this is reduced to a constant number of operations albeit at the cost of reduced effective resolution due to averaging attentionweighted positions an effect we counteract with MultiHead Attention as described in section 32 Selfattention sometimes called intraattention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence Selfattention has been used successfully in a variety of tasks including reading comprehension abstractive summarization textual entailment and learning taskindependent sentence representations 4 27 28 22 Endtoend memory networks are based on a recurrent attention mechanism instead of sequence aligned recurrence and have been shown to perform well on simplelanguage question answering and language modeling tasks 34 To the best of our knowledge however the Transformer is the first transduction model relying entirely on selfattention to compute representations of its input and output without using sequence aligned RNNs or convolution In the following sections we will describe the Transformer motivate selfattention and discuss its advantages over models such as 17 18 and 9 3 Model Architecture Most competitive neural sequence transduction models have an encoderdecoder structure 5 2 35 Here the encoder maps an input sequence of symbol representations x1 xn to a sequence of continuous representations z z1 zn Given z the decoder then generates an output sequence y1 ym of symbols one element at a time At each step the model is autoregressive 10 consuming the previously generated symbols as additional input when generating the next 2Figure 1 The Transformer model architecture The Transformer follows this overall architecture using stacked selfattention and pointwise fully connected layers for both the encoder and decoder shown in the left and right halves of Figure 1 respectively 31 Encoder and Decoder Stacks Encoder The encoder is composed of a stack of N 6 identical layers Each layer has two sublayers The first is a multihead selfattention mechanism and the second is a simple position wise fully connected feedforward network We employ a residual connection 11 around each of the two sublayers followed by layer normalization 1 That is the output of each sublayer is LayerNormx Sublayerx where Sublayerx is the function implemented by the sublayer itself To facilitate these residual connections all sublayers in the model as well as the embedding layers produce outputs of dimension dmodel 512 Decoder The decoder is also composed of a stack of N 6 identical layers In addition to the two sublayers in each encoder layer the decoder inserts a third sublayer which performs multihead attention over the output of the encoder stack Similar to the encoder we employ residual connections around each of the sublayers followed by layer normalization We also modify the selfattention sublayer in the decoder stack to prevent positions from attending to subsequent positions This masking combined with fact that the output embeddings are offset by one position ensures that the predictions for position i can depend only on the known outputs at positions less than i 32 Attention An attention function can be described as mapping a query and a set of keyvalue pairs to an output where the query keys values and output are all vectors The output is computed as a weighted sum 3Scaled DotProduct Attention MultiHead Attention Figure 2 left Scaled DotProduct Attention right MultiHead Attention consists of several attention layers running in parallel of the values where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key 321 Scaled DotProduct Attention We call our particular attention Scaled DotProduct Attention Figure 2 The input consists of queries and keys of dimension dk and values of dimension dv We compute the dot products of the query with all keys divide each by dk and apply a softmax function to obtain the weights on the values In practice we compute the attention function on a set of queries simultaneously packed together into a matrix Q The keys and values are also packed together into matrices K and V We compute the matrix of outputs as AttentionQ K V softmaxQKT dk V 1 The two most commonly used attention functions are additive attention 2 and dotproduct multi plicative attention Dotproduct attention is identical to our algorithm except for the scaling factor of 1 dk Additive attention computes the compatibility function using a feedforward network with a single hidden layer While the two are similar in theoretical complexity dotproduct attention is much faster and more spaceefficient in practice since it can be implemented using highly optimized matrix multiplication code While for small values of dk the two mechanisms perform similarly additive attention outperforms dot product attention without scaling for larger values of dk 3 We suspect that for large values of dk the dot products grow large in magnitude pushing the softmax function into regions where it has extremely small gradients 4 To counteract this effect we scale the dot products by 1 dk 322 MultiHead Attention Instead of performing a single attention function with dmodeldimensional keys values and queries we found it beneficial to linearly project the queries keys and values h times with different learned linear projections to dk dk and dv dimensions respectively On each of these projected versions of queries keys and values we then perform the attention function in parallel yielding dvdimensional 4To illustrate why the dot products get large assume that the components of q and k are independent random variables with mean 0 and variance 1 Then their dot product q k Pdk i1 qiki has mean 0 and variance dk 4output values These are concatenated and once again projected resulting in the final values as depicted in Figure 2 Multihead attention allows the model to jointly attend to information from different representation subspaces at different positions With a single attention head averaging inhibits this MultiHeadQ K V Concathead1 headhW O where headi AttentionQW Q i KW K i V W V i Where the projections are parameter matrices W Q i Rdmodeldk W K i Rdmodeldk W V i Rdmodeldv and W O Rhdvdmodel In this work we employ h 8 parallel attention layers or heads For each of these we use dk dv dmodelh 64 Due to the reduced dimension of each head the total computational cost is similar to that of singlehead attention with full dimensionality 323 Applications of Attention in our Model The Transformer uses multihead attention in three different ways In encoderdecoder attention layers the queries come from the previous decoder layer and the memory keys and values come from the output of the encoder This allows every position in the decoder to attend over all positions in the input sequence This mimics the typical encoderdecoder attention mechanisms in sequencetosequence models such as 38 2 9 The encoder contains selfattention layers In a selfattention layer all of the keys values and queries come from the same place in this case the output of the previous layer in the encoder Each position in the encoder can attend to all positions in the previous layer of the encoder Similarly selfattention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position We need to prevent leftward information flow in the decoder to preserve the autoregressive property We implement this inside of scaled dotproduct attention by masking out setting to all values in the input of the softmax which correspond to illegal connections See Figure 2 33 Positionwise FeedForward Networks In addition to attention sublayers each of the layers in our encoder and decoder contains a fully connected feedforward network which is applied to each position separately and identically This consists of two linear transformations with a ReLU activation in between FFNx max0 xW1 b1W2 b2 2 While the linear transformations are the same across different positions they use different parameters from layer to layer Another way of describing this is as two convolutions with kernel size 1 The dimensionality of input and output is dmodel 512 and the innerlayer has dimensionality dff 2048 34 Embeddings and Softmax Similarly to other sequence transduction models we use learned embeddings to convert the input tokens and output tokens to vectors of dimension dmodel We also use the usual learned linear transfor mation and softmax function to convert the decoder output to predicted nexttoken probabilities In our model we share the same weight matrix between the two embedding layers and the presoftmax linear transformation similar to 30 In the embedding layers we multiply those weights by dmodel 5Table 1 Maximum path lengths perlayer complexity and minimum number of sequential operations for different layer types n is the sequence length d is the representation dimension k is the kernel size of convolutions and r the size of the neighborhood in restricted selfattention Layer Type Complexity per Layer Sequential Maximum Path Length Operations SelfAttention On2 d O1 O1 Recurrent On d2 On On Convolutional Ok n d2 O1 Ologkn SelfAttention restricted Or n d O1 Onr 35 Positional Encoding Since our model contains no recurrence and no convolution in order for the model to make use of the order of the sequence we must inject some information about the relative or absolute position of the tokens in the sequence To this end we add positional encodings to the input embeddings at the bottoms of the encoder and decoder stacks The positional encodings have the same dimension dmodel as the embeddings so that the two can be summed There are many choices of positional encodings learned and fixed 9 In this work we use sine and cosine functions of different frequencies PEpos2i sinpos100002idmodel PEpos2i1 cospos100002idmodel where pos is the position and i is the dimension That is each dimension of the positional encoding corresponds to a sinusoid The wavelengths form a geometric progression from 2 to 10000 2 We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions since for any fixed offset k PEposk can be represented as a linear function of PEpos We also experimented with using learned positional embeddings 9 instead and found that the two versions produced nearly identical results see Table 3 row E We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training 4 Why SelfAttention In this section we compare various aspects of selfattention layers to the recurrent and convolu tional layers commonly used for mapping one variablelength sequence of symbol representations x1 xn to another sequence of equal length z1 zn with xi zi Rd such as a hidden layer in a typical sequence transduction encoder or decoder Motivating our use of selfattention we consider three desiderata One is the total computational complexity per layer Another is the amount of computation that can be parallelized as measured by the minimum number of sequential operations required The third is the path length between longrange dependencies in the network Learning longrange dependencies is a key challenge in many sequence transduction tasks One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network The shorter these paths between any combination of positions in the input and output sequences the easier it is to learn longrange dependencies 12 Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types As noted in Table 1 a selfattention layer connects all positions with a constant number of sequentially executed operations whereas a recurrent layer requires On sequential operations In terms of computational complexity selfattention layers are faster than recurrent layers when the sequence 6length n is smaller than the representation dimensionality d which is most often the case with sentence representations used by stateoftheart models in machine translations such as wordpiece 38 and bytepair 31 representations To improve computational performance for tasks involving very long sequences selfattention could be restricted to considering only a neighborhood of size r in the input sequence centered around the respective output position This would increase the maximum path length to Onr We plan to investigate this approach further in future work A single convolutional layer with kernel width k n does not connect all pairs of input and output positions Doing so requires a stack of Onk convolutional layers in the case of contiguous kernels or Ologkn in the case of dilated convolutions 18 increasing the length of the longest paths between any two positions in the network Convolutional layers are generally more expensive than recurrent layers by a factor of k Separable convolutions 6 however decrease the complexity considerably to Ok n d n d2 Even with k n however the complexity of a separable convolution is equal to the combination of a selfattention layer and a pointwise feedforward layer the approach we take in our model As side benefit selfattention could yield more interpretable models We inspect attention distributions from our models and present and discuss examples in the appendix Not only do individual attention heads clearly learn to perform different tasks many appear to exhibit behavior related to the syntactic and semantic structure of the sentences 5 Training This section describes the training regime for our models 51 Training Data and Batching We trained on the standard WMT 2014 EnglishGerman dataset consisting of about 45 million sentence pairs Sentences were encoded using bytepair encoding 3 which has a shared source target vocabulary of about 37000 tokens For EnglishFrench we used the significantly larger WMT 2014 EnglishFrench dataset consisting of 36M sentences and split tokens into a 32000 wordpiece vocabulary 38 Sentence pairs were batched together by approximate sequence length Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens 52 Hardware and Schedule We trained our models on one machine with 8 NVIDIA P100 GPUs For our base models using the hyperparameters described throughout the paper each training step took about 04 seconds We trained the base models for a total of 100000 steps or 12 hours For our big modelsdescribed on the bottom line of table 3 step time was 10 seconds The big models were trained for 300000 steps 35 days 53 Optimizer We used the Adam optimizer 20 with 1 09 2 098 and 109 We varied the learning rate over the course of training according to the formula lrate d05 model minstepnum05 stepnum warmupsteps15 3 This corresponds to increasing the learning rate linearly for the first warmupsteps training steps and decreasing it thereafter proportionally to the inverse square root of the step number We used warmupsteps 4000 54 Regularization We employ three types of regularization during training 7Table 2 The Transformer achieves better BLEU scores than previous stateoftheart models on the EnglishtoGerman and EnglishtoFrench newstest2014 tests at a fraction of the training cost Model BLEU Training Cost FLOPs ENDE ENFR ENDE ENFR ByteNet 18 2375 DeepAtt PosUnk 39 392 10 1020 GNMT RL 38 246 3992 23 1019 14 1020 ConvS2S 9 2516 4046 96 1018 15 1020 MoE 32 2603 4056 20 1019 12 1020 DeepAtt PosUnk Ensemble 39 404 80 1020 GNMT RL Ensemble 38 2630 4116 18 1020 11 1021 ConvS2S Ensemble 9 2636 4129 77 1019 12 1021 Transformer base model 273 381 33 1018 Transformer big 284 418 23 1019 Residual Dropout We apply dropout 33 to the output of each sublayer before it is added to the sublayer input and normalized In addition we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks For the base model we use a rate of Pdrop 01 Label Smoothing During training we employed label smoothing of value ls 01 36 This hurts perplexity as the model learns to be more unsure but improves accuracy and BLEU score 6 Results 61 Machine Translation On the WMT 2014 EnglishtoGerman translation task the big transformer model Transformer big in Table 2 outperforms the best previously reported models including ensembles by more than 20 BLEU establishing a new stateoftheart BLEU score of 284 The configuration of this model is listed in the bottom line of Table 3 Training took 35 days on 8 P100 GPUs Even our base model surpasses all previously published models and ensembles at a fraction of the training cost of any of the competitive models On the WMT 2014 EnglishtoFrench translation task our big model achieves a BLEU score of 410 outperforming all of the previously published single models at less than 14 the training cost of the previous stateoftheart model The Transformer big model trained for EnglishtoFrench used dropout rate Pdrop 01 instead of 03 For the base models we used a single model obtained by averaging the last 5 checkpoints which were written at 10minute intervals For the big models we averaged the last 20 checkpoints We used beam search with a beam size of 4 and length penalty 06 38 These hyperparameters were chosen after experimentation on the development set We set the maximum output length during inference to input length 50 but terminate early when possible 38 Table 2 summarizes our results and compares our translation quality and training costs to other model architectures from the literature We estimate the number of floating point operations used to train a model by multiplying the training time the number of GPUs used and an estimate of the sustained singleprecision floatingpoint capacity of each GPU 5 62 Model Variations To evaluate the importance of different components of the Transformer we varied our base model in different ways measuring the change in performance on EnglishtoGerman translation on the 5We used values of 28 37 60 and 95 TFLOPS for K80 K40 M40 and P100 respectively 8Table 3 Variations on the Transformer architecture Unlisted values are identical to those of the base model All metrics are on the EnglishtoGerman translation development set newstest2013 Listed perplexities are perwordpiece according to our bytepair encoding and should not be compared to perword perplexities N dmodel dff h dk dv Pdrop ls train PPL BLEU params steps dev dev 106 base 6 512 2048 8 64 64 01 01 100K 492 258 65 A 1 512 512 529 249 4 128 128 500 255 16 32 32 491 258 32 16 16 501 254 B 16 516 251 58 32 501 254 60 C 2 611 237 36 4 519 253 50 8 488 255 80 256 32 32 575 245 28 1024 128 128 466 260 168 1024 512 254 53 4096 475 262 90 D 00 577 246 02 495 255 00 467 253 02 547 257 E positional embedding instead of sinusoids 492 257 big 6 1024 4096 16 03 300K 433 264 213 development set newstest2013 We used beam search as described in the previous section but no checkpoint averaging We present these results in Table 3 In Table 3 rows A we vary the number of attention heads and the attention key and value dimensions keeping the amount of computation constant as described in Section 322 While singlehead attention is 09 BLEU worse than the best setting quality also drops off with too many heads In Table 3 rows B we observe that reducing the attention key size dk hurts model quality This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial We further observe in rows C and D that as expected bigger models are better and dropout is very helpful in avoiding overfitting In row E we replace our sinusoidal positional encoding with learned positional embeddings 9 and observe nearly identical results to the base model 63 English Constituency Parsing To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing This task presents specific challenges the output is subject to strong structural constraints and is significantly longer than the input Furthermore RNN sequencetosequence models have not been able to attain stateoftheart results in smalldata regimes 37 We trained a 4layer transformer with dmodel 1024 on the Wall Street Journal WSJ portion of the Penn Treebank 25 about 40K training sentences We also trained it in a semisupervised setting using the larger highconfidence and BerkleyParser corpora from with approximately 17M sentences 37 We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semisupervised setting We performed only a small number of experiments to select the dropout both attention and residual section 54 learning rates and beam size on the Section 22 development set all other parameters remained unchanged from the EnglishtoGerman base translation model During inference we 9Table 4 The Transformer generalizes well to English constituency parsing Results are on Section 23 of WSJ Parser Training WSJ 23 F1 Vinyals Kaiser el al 2014 37 WSJ only discriminative 883 Petrov et al 2006 29 WSJ only discriminative 904 Zhu et al 2013 40 WSJ only discriminative 904 Dyer et al 2016 8 WSJ only discriminative 917 Transformer 4 layers WSJ only discriminative 913 Zhu et al 2013 40 semisupervised 913 Huang Harper 2009 14 semisupervised 913 McClosky et al 2006 26 semisupervised 921 Vinyals Kaiser el al 2014 37 semisupervised 921 Transformer 4 layers semisupervised 927 Luong et al 2015 23 multitask 930 Dyer et al 2016 8 generative 933 increased the maximum output length to input length 300 We used a beam size of 21 and 03 for both WSJ only and the semisupervised setting Our results in Table 4 show that despite the lack of taskspecific tuning our model performs sur prisingly well yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar 8 In contrast to RNN sequencetosequence models 37 the Transformer outperforms the Berkeley Parser 29 even when training only on the WSJ training set of 40K sentences 7 Conclusion In this work we presented the Transformer the first sequence transduction model based entirely on attention replacing the recurrent layers most commonly used in encoderdecoder architectures with multiheaded selfattention For translation tasks the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers On both WMT 2014 EnglishtoGerman and WMT 2014 EnglishtoFrench translation tasks we achieve a new state of the art In the former task our best model outperforms even all previously reported ensembles We are excited about the future of attentionbased models and plan to apply them to other tasks We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local restricted attention mechanisms to efficiently handle large inputs and outputs such as images audio and video Making generation less sequential is another research goals of ours The code we used to train and evaluate our models is available at httpsgithubcom tensorflowtensor2tensor Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful comments corrections and inspiration References 1 Jimmy Lei Ba Jamie Ryan Kiros and Geoffrey E Hinton Layer normalization arXiv preprint arXiv160706450 2016 2 Dzmitry Bahdanau Kyunghyun Cho and Yoshua Bengio Neural machine translation by jointly learning to align and translate CoRR abs14090473 2014 3 Denny Britz Anna Goldie MinhThang Luong and Quoc V Le Massive exploration of neural machine translation architectures CoRR abs170303906 2017 4 Jianpeng Cheng Li Dong and Mirella Lapata Long shortterm memorynetworks for machine reading arXiv preprint arXiv160106733 2016 105 Kyunghyun Cho Bart van Merrienboer Caglar Gulcehre Fethi Bougares Holger Schwenk and Yoshua Bengio Learning phrase representations using rnn encoderdecoder for statistical machine translation CoRR abs14061078 2014 6 Francois Chollet Xception Deep learning with depthwise separable convolutions arXiv preprint arXiv161002357 2016 7 Junyoung Chung aglar Glehre Kyunghyun Cho and Yoshua Bengio Empirical evaluation of gated recurrent neural networks on sequence modeling CoRR abs14123555 2014 8 Chris Dyer Adhiguna Kuncoro Miguel Ballesteros and Noah A Smith Recurrent neural network grammars In Proc of NAACL 2016 9 Jonas Gehring Michael Auli David Grangier Denis Yarats and Yann N Dauphin Convolu tional sequence to sequence learning arXiv preprint arXiv170503122v2 2017 10 Alex Graves Generating sequences with recurrent neural networks arXiv preprint arXiv13080850 2013 11 Kaiming He Xiangyu Zhang Shaoqing Ren and Jian Sun Deep residual learning for im age recognition In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition pages 770778 2016 12 Sepp Hochreiter Yoshua Bengio Paolo Frasconi and Jrgen Schmidhuber Gradient flow in recurrent nets the difficulty of learning longterm dependencies 2001 13 Sepp Hochreiter and Jrgen Schmidhuber Long shortterm memory Neural computation 9817351780 1997 14 Zhongqiang Huang and Mary Harper Selftraining PCFG grammars with latent annotations across languages In Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing pages 832841 ACL August 2009 15 Rafal Jozefowicz Oriol Vinyals Mike Schuster Noam Shazeer and Yonghui Wu Exploring the limits of language modeling arXiv preprint arXiv160202410 2016 16 ukasz Kaiser and Samy Bengio Can active memory replace attention In Advances in Neural Information Processing Systems NIPS 2016 17 ukasz Kaiser and Ilya Sutskever Neural GPUs learn algorithms In International Conference on Learning Representations ICLR 2016 18 Nal Kalchbrenner Lasse Espeholt Karen Simonyan Aaron van den Oord Alex Graves and Ko ray Kavukcuoglu Neural machine translation in linear time arXiv preprint arXiv161010099v2 2017 19 Yoon Kim Carl Denton Luong Hoang and Alexander M Rush Structured attention networks In International Conference on Learning Representations 2017 20 Diederik Kingma and Jimmy Ba Adam A method for stochastic optimization In ICLR 2015 21 Oleksii Kuchaiev and Boris Ginsburg Factorization tricks for LSTM networks arXiv preprint arXiv170310722 2017 22 Zhouhan Lin Minwei Feng Cicero Nogueira dos Santos Mo Yu Bing Xiang Bowen Zhou and Yoshua Bengio A structured selfattentive sentence embedding arXiv preprint arXiv170303130 2017 23 MinhThang Luong Quoc V Le Ilya Sutskever Oriol Vinyals and Lukasz Kaiser Multitask sequence to sequence learning arXiv preprint arXiv151106114 2015 24 MinhThang Luong Hieu Pham and Christopher D Manning Effective approaches to attention based neural machine translation arXiv preprint arXiv150804025 2015 1125 Mitchell P Marcus Mary Ann Marcinkiewicz and Beatrice Santorini Building a large annotated corpus of english The penn treebank Computational linguistics 192313330 1993 26 David McClosky Eugene Charniak and Mark Johnson Effective selftraining for parsing In Proceedings of the Human Language Technology Conference of the NAACL Main Conference pages 152159 ACL June 2006 27 Ankur Parikh Oscar Tckstrm Dipanjan Das and Jakob Uszkoreit A decomposable attention model In Empirical Methods in Natural Language Processing 2016 28 Romain Paulus Caiming Xiong and Richard Socher A deep reinforced model for abstractive summarization arXiv preprint arXiv170504304 2017 29 Slav Petrov Leon Barrett Romain Thibaux and Dan Klein Learning accurate compact and interpretable tree annotation In Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the ACL pages 433440 ACL July 2006 30 Ofir Press and Lior Wolf Using the output embedding to improve language models arXiv preprint arXiv160805859 2016 31 Rico Sennrich Barry Haddow and Alexandra Birch Neural machine translation of rare words with subword units arXiv preprint arXiv150807909 2015 32 Noam Shazeer Azalia Mirhoseini Krzysztof Maziarz Andy Davis Quoc Le Geoffrey Hinton and Jeff Dean Outrageously large neural networks The sparselygated mixtureofexperts layer arXiv preprint arXiv170106538 2017 33 Nitish Srivastava Geoffrey E Hinton Alex Krizhevsky Ilya Sutskever and Ruslan Salakhutdi nov Dropout a simple way to prevent neural networks from overfitting Journal of Machine Learning Research 15119291958 2014 34 Sainbayar Sukhbaatar Arthur Szlam Jason Weston and Rob Fergus Endtoend memory networks In C Cortes N D Lawrence D D Lee M Sugiyama and R Garnett editors Advances in Neural Information Processing Systems 28 pages 24402448 Curran Associates Inc 2015 35 Ilya Sutskever Oriol Vinyals and Quoc VV Le Sequence to sequence learning with neural networks In Advances in Neural Information Processing Systems pages 31043112 2014 36 Christian Szegedy Vincent Vanhoucke Sergey Ioffe Jonathon Shlens and Zbigniew Wojna Rethinking the inception architecture for computer vision CoRR abs151200567 2015 37 Vinyals Kaiser Koo Petrov Sutskever and Hinton Grammar as a foreign language In Advances in Neural Information Processing Systems 2015 38 Yonghui Wu Mike Schuster Zhifeng Chen Quoc V Le Mohammad Norouzi Wolfgang Macherey Maxim Krikun Yuan Cao Qin Gao Klaus Macherey et al Googles neural machine translation system Bridging the gap between human and machine translation arXiv preprint arXiv160908144 2016 39 Jie Zhou Ying Cao Xuguang Wang Peng Li and Wei Xu Deep recurrent models with fastforward connections for neural machine translation CoRR abs160604199 2016 40 Muhua Zhu Yue Zhang Wenliang Chen Min Zhang and Jingbo Zhu Fast and accurate shiftreduce constituent parsing In Proceedings of the 51st Annual Meeting of the ACL Volume 1 Long Papers pages 434443 ACL August 2013 12Attention Visualizations InputInput Layer5 It is in this spirit that a majority of American governments have passed new laws since 2009 making the registration or voting process more difficult EOS pad pad pad pad pad pad It is in this spirit that a majority of American governments have passed new laws since 2009 making the registration or voting process more difficult EOS pad pad pad pad pad pad Figure 3 An example of the attention mechanism following longdistance dependencies in the encoder selfattention in layer 5 of 6 Many of the attention heads attend to a distant dependency of the verb making completing the phrase makingmore difficult Attentions here shown only for the word making Different colors represent different heads Best viewed in color 13InputInput Layer5 The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad InputInput Layer5 The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad Figure 4 Two attention heads also in layer 5 of 6 apparently involved in anaphora resolution Top Full attentions for head 5 Bottom Isolated attentions from just the word its for attention heads 5 and 6 Note that the attentions are very sharp for this word 14InputInput Layer5 The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad InputInput Layer5 The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad Figure 5 Many of the attention heads exhibit behaviour that seems related to the structure of the sentence We give two such examples above from two different heads from the encoder selfattention at layer 5 of 6 The heads clearly learned to perform different tasks 15